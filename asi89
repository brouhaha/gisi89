#!/usr/bin/python3
# Intel 8089 Assembler
# Copyright 2016 Eric Smith <spacewar@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of version 3 of the GNU General Public License
# as published by the Free Software Foundation.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import argparse
import re
import sys

from i89 import I89
from memory import Memory
from intelhex import IntelHex
from expressionparser import ExpressionParser


class AssemblerError(Exception):
    def __init__(self, sl, s):
        self.sl = sl
        super().__init__(str(sl.line_num) + ': ' + s)

class WrongOperandCount(AssemblerError):
    def __init__(self, sl, mnemonic, actual, expected):
        super().__init__(sl, '%s directive given wrong operand count %d, expected %d' % (mnemonic, actual, expected))

class PhaseError(AssemblerError):
    def __init__(self, sl, identifier, pass1_value, pass2_value):
        super().__init__(sl, 'phase error, %s was %04x in pass 1, %04x in pass 2' % (identifier, pass1_value, pass2_value))

class DataUndefinedDuringPhase2Error(AssemblerError):
    def __init__(self, sl):
        super().__init__(sl, 'undefined data during phase 2')

class UndefinedSymbol(AssemblerError):
    def __init__(self, sl, symbol):
        super().__init__(sl, 'undefined symbol %s' % symbol)

class UnimplementedDirective(AssemblerError):
    def __init__(self, sl):
        super().__init__(sl, 'unimplemented directive %s' % sl.mnemonic)

class InvalidStrucNesting(AssemblerError):
    def __init__(self, sl):
        super().__init__(sl, 'invalid struc nesting')

class SyntaxError(AssemblerError):
    def __init__(self, sl, s):
        super().__init__(sl, 'syntax error: ' + s)
        
class OperandSyntaxError(SyntaxError):
    def __init__(self, sl, s):
        super().__init__(sl, 'operand: ' + s)

class ExpressionSyntaxError(SyntaxError):
    def __init__(self, sl, s):
        super().__init__(sl, 'expression: ' + s)

class OperandsNotAppropriateForInstruction(AssemblerError):
    pass

class OperandOutOfRange(AssemblerError):
    pass

class UnknownMnemonic(SyntaxError):
    pass

class IdentifierWithoutColon(SyntaxError):
    pass

class DirectiveRequiresName(SyntaxError):
    pass

class DirectiveCannotHaveLabel(SyntaxError):
    pass


class ASI89:

    def __init__(self, srcfile, listfile, hexfile):
        self.srcfile = srcfile
        self.listfile = listfile
        self.hexfile = hexfile

        self.i89 = I89()

        self.symtab = { }
        self.memory = Memory()

        self.pass_num = 0

        self.line_num = 0  # current line number
        self.line = None   # text of current line
        self.sl = None     # current scanned line
        self.pl = None     # current parsed line

        self.ep = ExpressionParser()

    def set_symbol(self, symbol, value, phase_check = False):
        if phase_check and self.symtab[symbol] != value:
            raise PhaseError(self.sl, symbol, self.symtab[symbol], value)
        self.symtab[symbol] = value

    def emit(self, bb):
        pc = self.symtab['$']
        l = len(bb)
        if self.pass_num == 2:
            #if -1 in bb:
            #    raise DataUndefinedDuringPhase2Error(self.sl)
            self.memory[pc:pc+l] = bb
        self.set_symbol('$', pc + l)
        

    class Directive:
        def process(self, asi89):
            raise UnimplementedDirective(asi89.pl.sl)

        def __init__(self, name_required = False,
                           label_allowed = True,
                           static_expression_required = False):
            self.name_required = name_required
            self.label_allowed = label_allowed
            self.static_expression_required = static_expression_required


    class EQU_Directive(Directive):
        def process(self, asi89):
            if len(asi89.pl.operands) != 1:
                raise WrongOperandCount(asi89.sl, asi89.sl.mnemonic, len(asi89.pl.operands), 1)
            asi89.set_symbol(asi89.sl.label, asi89.pl.operands[0], asi89.pass_num == 2)

        def __init__(self):
            super().__init__(name_required = True,
                             label_allowed = False,
                             static_expression_required = True)


    class ORG_Directive(Directive):
        def process(self, asi89):
            if len(asi89.pl.operands) != 1:
                raise WrongOperandCount(asi89.sl, asi89.sl.mnemonic, len(asi89.pl.operands), 1)
            asi89.set_symbol('$', asi89.pl.operands[0])

        def __init__(self):
            super().__init__(name_required = False,
                             label_allowed = False,
                             static_expression_required = True)


    class DS_Directive(Directive):
        def process(self, asi89):
            if len(asi89.pl.operands) != 1:
                raise WrongOperandCount(asi89.sl, asi89.sl.mnemonic, len(asi89.pl.operands), 1)
            asi89.set_symbol('$', asi89.symtab['$'] + asi89.pl.operands[0])

        def __init__(self):
            super().__init__(name_required = False,
                             label_allowed = True,
                             static_expression_required = True)


    class DB_Directive(Directive):
        def process(self, asi89):
            if len(asi89.pl.operands) < 1:
                raise WrongOperandCount(asi89.sl, asi89.sl.mnemonic, len(asi89.pl.operands), 1)
            return bytearray(asi89.pl.operands)


    class DW_Directive(Directive):
        def process(self, asi89):
            if len(asi89.pl.operands) < 1:
                raise WrongOperandCount(asi89.sl, asi89.sl.mnemonic, len(asi89.pl.operands), 1)
            if -1 in asi89.pl.operands:
                bb = [-1] * (2 * len(asi89.pl.operands))
            else:
                eb = [v & 0xff for v in asi89.pl.operands]
                ob = [v >> 8   for v in asi89.pl.operands]
                bb = eb + ob
                bb[::2] = eb
                bb[1::2] = ob
            return bb


    class STRUC_Directive(Directive):
        def __init__(self):
            super().__init__(name_required = True,
                             label_allowed = False,
                             static_expression_required = False)

        def process(self, asi89):
            if len(asi89.pl.operands) > 0:
                raise WrongOperandCount(asi89.sl, asi89.sl.mnemonic, len(asi89.pl.operands), 0)
            if asi89.struc_name is not None:
                raise InvalidStrucNesting(asi89.sl)
            asi89.struc_name = asi89.sl.label
            asi89.struc_save_pc = asi89.symtab['$']
            asi89.symtab['$'] = 0
                

    class ENDS_Directive(Directive):
        def __init__(self):
            super().__init__(name_required = True,
                             label_allowed = False,
                             static_expression_required = False)

        def process(self, asi89):
            if len(asi89.pl.operands) > 0:
                raise WrongOperandCount(asi89.sl, asi89.sl.mnemonic, len(asi89.pl.operands), 0)
            if asi89.struc_name is None or asi89.struc_name != asi89.sl.label:
                raise InvalidStrucNesting(asi89.sl)
            asi89.symtab['$'] = asi89.struc_save_pc
            asi89.struc_save_pc = None
            asi89.struc_name = None


    class FILL_Directive(Directive):
        def __init__(self):
            super().__init__(name_required = False,
                             label_allowed = True,
                             static_expression_required = False)

        def process(self, asi89):
            if len(asi89.pl.operands) != 2:
                raise WrongOperandCount(asi89.sl, asi89.sl.mnemonic, len(asi89.pl.operands), 2)
            count = asi89.pl.operands[0] - asi89.symtab['$']
            value = asi89.pl.operands[1]
            asi89.emit(bytearray([value] * count))


    directives = { 'db':      DB_Directive(),
                   'dd':      Directive(),
                   'ds':      DS_Directive(),
                   'dw':      DW_Directive(),
                   'end':     Directive(label_allowed = False),
                   'ends':    ENDS_Directive(), # ends struct or segment
                   'equ':     EQU_Directive(),
                   'even':    Directive(label_allowed = False),
                   'extrn':   Directive(label_allowed = False),
                   'fill':    FILL_Directive(),
                   'name':    Directive(label_allowed = False),
                   'org':     ORG_Directive(),
                   'public':  Directive(label_allowed = False),
                   'segment': Directive(name_required = True),
                   'struc':   STRUC_Directive()
                  }


    class ScannedLine:
        def __init__(self, line_num, line):
            self.line_num = line_num
            self.line     = line
            self.label    = None
            self.colon    = None
            self.mnemonic = None
            self.operands = []
            self.comment  = None


    class ParsedLine:
        def __init__(self):
            self.inst     = None
            self.operands = []


    ident_re_s = '[a-z0-9?_@]+'

    line_re = re.compile(r'((?P<label>' + ident_re_s + ')(?P<colon>:)?)?'
                         r'(\s+(?P<mnemonic>[a-z]+)'
                         r'(\s+(?P<operands>([^,;\s]+)(\s*,\s*[^,;\s]+)*))?)?'
                         r'\s*(;(?P<comment>.*))?$')

    operands_split_re = re.compile(r'\s*,\s*')

    def scan_line(self):
        self.line = self.line.rstrip().lower().expandtabs()
        self.sl = ASI89.ScannedLine(self.line_num, self.line)
        match = self.line_re.match(self.line)
        if not match:
            raise SyntaxError(self.sl, '')
        if match.group('operands') is not None:
            self.sl.operands = self.operands_split_re.split(match.group('operands'))
        else:
            self.sl.operands = []
        self.sl.label    = match.group('label')
        self.sl.colon    = match.group('colon') is not None
        self.sl.mnemonic = match.group('mnemonic')
        self.sl.comment  = match.group('comment')


    # operand
    #   numeric value
    #     identifier(only)
    #   register
    #     pointer register
    #   memory loc
    #     [preg]
    #     [preg].offset
    #     [preg+IX]
    #     [preg+IX+]


    reg_re_s  = '|'.join([r.name for r in list(I89.Reg)])
    reg_operand_re = re.compile('(?P<reg>' + reg_re_s + ')$')

    areg_re_s = '|'.join([r.name for r in list(I89.AReg)])
    mem_operand_re = re.compile(r'\[(?P<base>' + areg_re_s + ')'
                                r'(?P<index>\+ix(?P<autoincr>\+)?)?'
                                r'\]'
                                r'(\.(?P<offset>[^,]+))?'
                                r'$')


    def parse_expression(self, s, undefined_ok = False):
        try:
            ast = self.ep.parse(s)
        except Exception as e:
            raise ExpressionSyntaxError(self.sl, s)
        try:
            value = ast.eval(self.symtab)
        except ExpressionParser.UndefinedSymbol as us:
            if undefined_ok:
                value = 0
            else:
                raise UndefinedSymbol(self.sl, us)
        return value


    def parse_operand(self, s):
        m = self.mem_operand_re.match(s)
        if m:
            base = m.group('base')
            indexed = m.group('index') is not None
            auto_increment = m.group('autoincr') is not None
            offset = m.group('offset')
            if offset is not None:
                offset = self.parse_expression(m.group('offset'), undefined_ok = self.pass_num == 1)
            return I89.MemoryReference(base, indexed, auto_increment, offset)

        m = self.reg_operand_re.match(s)
        if m:
            return I89.Reg[m.group(0)]

        e = self.parse_expression(s, undefined_ok = self.pass_num == 1)
        return e



    # return inst, directive, name
    def parse_line(self):
        self.pl = ASI89.ParsedLine()
        if self.sl.mnemonic is None:
            self.pl.inst = None
            if self.sl.label is not None:
                if not self.sl.colon:
                    raise IdentifierWithoutColon(self.sl, self.sl.label)
                self.set_symbol(self.sl.label, self.symtab['$'], phase_check = self.pass_num == 2)
            return

        if self.sl.mnemonic in self.directives:
            self.pl.inst = self.directives[self.sl.mnemonic]
            if self.sl.label is None:
                if self.pl.inst.name_required:
                    raise DirectiveRequiresName(self.sl, self.sl.mnemonic)
            elif self.sl.colon: # label
                if not self.pl.inst.label_allowed:
                    raise DirectiveCannotHaveLabel()
                self.set_symbol(self.sl.label, self.symtab['$'], phase_check = self.pass_num == 2)
            else: # name
                if not self.pl.inst.name_required:
                    raise IdentifierWithoutColon(self.sl, self.sl.label)
        else:
            try:
                self.pl.inst = self.i89.mnemonic_search(self.sl.mnemonic)
            except I89.UnknownMnemonic:
                raise UnknownMnemonic(self.sl.mnemonic)
            if self.sl.label is not None:
                if not self.sl.colon:
                    raise IdentifierWithoutColon()
                self.set_symbol(self.sl.label, self.symtab['$'], phase_check = self.pass_num == 2)

        self.pl.operands = [self.parse_operand(so) for so in self.sl.operands]


    def assemble_line(self):
        if self.pl.inst == None:
            bb = None
        elif isinstance(self.pl.inst, ASI89.Directive):
            bb = self.pl.inst.process(self)
        else:
            try:
                bb = self.i89.assemble_instruction(self.symtab['$'], self.pl.inst, self.pl.operands)
            except I89.NoMatchingForm:
                raise OperandsNotAppropriateForInstruction(self.sl, '')
            except I89.OperandOutOfRange:
                raise OperandOutOfRange(self.sl, '')
        if bb is None:
            bb = bytearray()
        if self.pass_num == 2 and self.listfile:
            s = '%5d  ' % self.line_num
            if len(bb):
                s += '%04x  ' % self.symtab['$']
            else:
                s += '      '
            for i in range(6):
                if i < len(bb):
                    s += '%02x ' % bb[i]
                else:
                    s += '   '
            s += ' ' + self.line
            print(s, file = self.listfile)
        if len(bb):
            self.emit(bb)
        

    def assemble(self):
        for self.pass_num in range(1, 3):
            print('pass %d' % self.pass_num)
            self.srcfile.seek(0)
            self.symtab['$'] = 0
            self.line_num = 0
            self.struc_name = None
            self.struc_save_pc = None
            for self.line in self.srcfile:
                self.line_num += 1
                self.scan_line()
                self.parse_line()
                self.assemble_line()
            if self.struc_name is not None:
                raise InvalidStrucNexting(self)

        if self.listfile is not None:
            print(file = self.listfile)
            for k in sorted(self.symtab):
                if k != '$':
                    print('%04x %-8s' % (self.symtab[k], k), file = self.listfile)
            self.listfile.flush()
            #self.listfile.close()
            #x = self.listfile.tell()
            #print(self.listfile.tell())

        if self.hexfile is not None:
            IntelHex().write(self.hexfile, self.memory)
            self.hexfile.flush()
            #self.hexfile.close()
            #x = self.hexfile.tell()
            #print(self.hexfile.tell())

if __name__ == '__main__':
    if False:
        for line in sys.stdin:
            m = mem_operand_re.match(line)
            if not m:
                print('no match')
                continue
            print(m.groups())
            print(m.groupdict())

    if False:
        for line in sys.stdin:
            sl = scan_line(0, line)
            if sl.label is not None:
                print('label:   ', sl.label)
                if not sl.colon:
                    print('no colon')
            if sl.mnemonic is not None:
                print('mnemonic:', sl.mnemonic)
            if sl.operands:
                for i in range(len(sl.operands)):
                    print('operand %d:' % i, sl.operands[i])
            if sl.comment:
                print('comment:', sl.comment)

    parser = argparse.ArgumentParser(description = 'Assembler for Intel 8089 I/O processor')

    parser.add_argument('asmfile', type=argparse.FileType('r'),
                        help = 'assembler source file')

    parser.add_argument('-l', '--listing', type=argparse.FileType('w'),
                        help = 'listing output file')

    parser.add_argument('-o', '--output', type=argparse.FileType('w'),
                        help = 'output file')

    args = parser.parse_args()

    asi89 = ASI89(srcfile = args.asmfile, listfile = args.listing, hexfile = args.output)

    asi89.assemble()
